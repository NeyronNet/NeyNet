using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ActivFuncNN
{
    /// <summary>
    /// Класс недифференцируемых на всём интересующем нас промежутке функций (не подходит для некоторых алгоритмов обучения).
    /// </summary>
    class NotDiff
    {
        /// <summary>
        ///  Пороговая функция. Функция, принимающая сумму произведений входов на веса (NET) и "порог" (некую величину -  T = -w0*x0 (произведение веса биаса на его значение, умноженное на -1), не доходя до которой функция возвращает 0, а перевалив через которую - 1; по умолчанию заданную в 0.8). 
        /// 
        /// Функция не является дифференцируемой на всей оси абсцисс, её нельзя использовать в сетях, обучающихся по алгоритму обратного распространения ошибки и другим алгоритмам, требующим дифференцируемости передаточной функции.
        /// 
        ///  Предельные значения получаются из функции ThresholdLimit.
        /// </summary>
        public static Double Threshold(Double NET, Double T = 0.8)
        {
            if (NET < T) return 0;
            else return 1;
        }
        /// <summary>
        /// Предельные значения пороговой функции. Принимает 0 - для получения нижней границы, и 1 - для верхней.
        /// </summary>
        public static int ThresholdLimit(int Position)
        {
            if (Position == 0)
                return 0;
            else
                return 1;
        }
        /// <summary>
        ///  Линейная передаточная. Функция, принимающая сумму произведений входов на веса (NET) и "параметр функции" (некую величину -  T, способную сдвигать значения функции). По умолчанию Т=1.
        ///  Возвращает результат вычисления функции F(NET)=T*NET
        /// 
        /// Функция не является дифференцируемой на всей оси абсцисс, её нельзя использовать в сетях, обучающихся по алгоритму обратного распространения ошибки и другим алгоритмам, требующим дифференцируемости передаточной функции.
        /// 
        ///  Предельные значения получаются из функции LinearTransferLimit.
        /// </summary>
        public static Double LinearTransfer(Double NET, Double T = 1)
        {
            Double FNET = 0;
            FNET = T * NET;
            return FNET;
        }
        /// <summary>
        /// Предельные значения линейной передаточной функции. Принимает 0 - для получения нижней границы, и 1 - для верхней.
        /// </summary>
        public static int LinearTransferLimit(int Position)
        {
            if (Position == 0)
                return 0;
            else
                return 1;
        }
        /// <summary>
        ///  Полулинейная передаточная. Функция, принимающая сумму произведений входов на веса (NET).
        ///  Возвращает 0, если NET <=0, 1 - если >=1 и NET в других случаях.
        /// 
        /// Функция не является дифференцируемой на всей оси абсцисс, её нельзя использовать в сетях, обучающихся по алгоритму обратного распространения ошибки и другим алгоритмам, требующим дифференцируемости передаточной функции.
        /// 
        ///  Предельные значения получаются из функции LinearTransferLimit.
        /// </summary>
        public static Double NLinearTransfer(Double NET)
        {
            if (NET <= 0) return 0;
            else if (NET >= 1) return 1;
            else return NET;
        }
        /// <summary>
        /// Предельные значения полулинейной передаточной функции. Принимает 0 - для получения нижней границы, и 1 - для верхней.
        /// </summary>
        public static int NLinearTransferLimit(int Position)
        {
            if (Position == 0)
                return 0;
            else
                return 1;
        }
    }
}
